# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup, element
from selenium import webdriver
import time
import pandas as pd
from selenium.common import TimeoutException, StaleElementReferenceException, NoSuchElementException, WebDriverException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
from datetime import datetime, timedelta
import sqlite3
import tkinter as tk
import math


try:
    driver = webdriver.Firefox()
    now_page = "https://old.bankrot.fedresurs.ru/TradeList.aspx?attempt=0"
    driver.get(now_page)
    wait = WebDriverWait(driver, 10)

except WebDriverException:
    pass


i = 0
list_with_page_value = []
страницы_с_первой_по_11 = 2
f = 3
сколько_спарсили_номеров_торгов = 2
текущий_элемент_в_клиенте = 0
список_ключ_значений_торгов = []

# def надежный_поиск_элемента(driver, locator):
#     """Пытается найти элемент и возвращает его, если он не устарел (stale)."""
#     ожидание()
#     попытка = 0
#     while попытка < 3:  # Лимит попыток перехвата исключения
#         try:
#             элемент = WebDriverWait(driver, 1).until(EC.presence_of_element_located(locator))
#             # Делаем что-то с элементом, чтобы убедиться, что он не устарел
#             dummy = элемент.text
#             return элемент
#         except StaleElementReferenceException:
#             print("Элемент устарел, пытаемся найти еще раз")
#             попытка += 1
#             time.sleep(1)  # Ждем немного перед следующей попыткой
#     raise Exception("Не удалось найти стабильный элемент после нескольких попыток")
#
#
# def ожидание():
#     wait = WebDriverWait(driver, 1)
#     wait.until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
#     wait.until(EC.visibility_of_element_located((By.TAG_NAME, 'body')))
#     wait.until(EC.presence_of_element_located((By.XPATH, '/html/body/form/table/tbody')))
#     wait.until(EC.visibility_of_element_located((By.XPATH, '/html/body/form/table/tbody')))
def ожидание(driver, timeout=10):
    wait = WebDriverWait(driver, timeout)
    wait.until(EC.presence_of_all_elements_located((By.TAG_NAME, 'html')))
    wait.until(EC.visibility_of_all_elements_located((By.TAG_NAME, 'html')))


def надежный_поиск_элемента(driver, locator):
    попытка = 0
    while попытка < 3:
        try:
            элемент = WebDriverWait(driver, 10).until(EC.presence_of_element_located(locator))
            элемент.text  # Простая операция, чтобы проверить stale или нет
            return элемент
        except StaleElementReferenceException:
            попытка += 1
            time.sleep(1)
    raise Exception("Не удалось найти стабильный элемент после нескольких попыток")



def заход_в_карточку(итератор_для_проваливания_в_клиентов=2):
    while итератор_для_проваливания_в_клиентов <= 21:
        ожидание(driver)
        номер_торгов = driver.find_element('xpath', '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[{}]/td[1]'.format(итератор_для_проваливания_в_клиентов)).text
        дата_размещения_в_ефрсб = driver.find_element('xpath', '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[{}]/td[3]'.format(итератор_для_проваливания_в_клиентов)).text
        main_window = driver.current_window_handle
        print(номер_торгов)
        if итератор_для_проваливания_в_клиентов < 10:
            ожидание(driver)
            ссылка_на_клиента = driver.find_element('xpath','//*[@id="ctl00_cphBody_gvTradeList_ctl0{}_HyperLink1"]'.format(итератор_для_проваливания_в_клиентов)).get_attribute('href') #тут он заходит с торгов в должника
            элемент = надежный_поиск_элемента(driver, (By.XPATH, '//*[@id="ctl00_cphBody_gvTradeList_ctl0{}_HyperLink1"]'.format(итератор_для_проваливания_в_клиентов)))
            элемент.click()
        elif итератор_для_проваливания_в_клиентов >= 10:
            ожидание(driver)
            ссылка_на_клиента = driver.find_element('xpath','//*[@id="ctl00_cphBody_gvTradeList_ctl{}_HyperLink1"]'.format(итератор_для_проваливания_в_клиентов)).get_attribute('href') #тут он заходит с торгов в должника
            элемент = надежный_поиск_элемента(driver, (By.XPATH, '//*[@id="ctl00_cphBody_gvTradeList_ctl{}_HyperLink1"]'.format(итератор_для_проваливания_в_клиентов)))
            элемент.click()
        итератор_записей_в_должнике = 2
        итератор_страниц_в_должнике = 2

        is_duplicate = False
        for item in список_ключ_значений_торгов:
            if item['ссылка_на_клиента'] == ссылка_на_клиента:
                is_duplicate = True
                итератор_для_проваливания_в_клиентов += 1
                driver.back()
                ожидание(driver)

                break

        if not is_duplicate:
            ожидание(driver)
            регион = driver.find_element(By.XPATH, '//*[@id="ctl00_cphBody_lblRegion"]').text
            элемент = надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике)))

            current_window = driver.current_window_handle
            ожидание(driver)
            количество_элементов = driver.find_element(By.XPATH,'// *[ @ id = "ctl00_cphBody_paiMessages_tdPaggingAdvInfo"]').text
            # количество_элементов = количество_элементов.text
            xpath_template = ('/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике))
            результат = re.search(r'Всего: (\d+)', количество_элементов)
            количество_элементов = int(результат.group(1))
            счетчик_пройденных_элементов = 1
            старая_дата = None
            while итератор_страниц_в_должнике < 3 and счетчик_пройденных_элементов < количество_элементов and счетчик_пройденных_элементов<=40:
                    ожидание(driver)
                    wait = WebDriverWait(driver, 3)
                    full_xpath = xpath_template.format(итератор_записей_в_должнике)
                    wait.until(EC.presence_of_element_located((By.XPATH, full_xpath)))
                    wait.until(EC.visibility_of_element_located((By.XPATH, full_xpath)))
                    if итератор_записей_в_должнике <= 21 and (элемент.text not in ("Объявление о проведении торгов", "Объявление о проведении торгов (изменено)")):
                        ожидание(driver)
                        итератор_записей_в_должнике += 1
                        счетчик_пройденных_элементов += 1
                        if итератор_записей_в_должнике <= 21:
                            print(
                                '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(
                                    итератор_записей_в_должнике))
                            элемент = надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике)))
                            текущая_дата = driver.find_element(By.XPATH,
                                                               '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[1]'.format(
                                                                   итератор_записей_в_должнике))
                            текущая_дата = текущая_дата.text
                            текущая_дата = datetime.strptime(текущая_дата, "%d.%m.%Y %H:%M:%S")
                            xpath_template = ('/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике))
                            ожидание(driver)
                            if старая_дата == None:
                                None
                            if старая_дата != None:
                                разница = старая_дата - текущая_дата
                                if разница >= timedelta(days=1):
                                    break
                                elif разница >= timedelta(days=0):
                                    pass



                        elif итератор_записей_в_должнике > 21:
                            pass
                    elif итератор_записей_в_должнике > 21 and (элемент.text not in ("Объявление о проведении торгов", "Объявление о проведении торгов (изменено)")):
                         if math.ceil(количество_элементов / 20) >= итератор_страниц_в_должнике and итератор_страниц_в_должнике <= 3:
                            print('больше одной страницы')
                            ожидание(driver)
                            # def wait_for_page_source_to_change(old_page_source):
                            #     WebDriverWait(driver, 10).until(EC.text_to_be_present_in_element((By.TAG_NAME, "html"), old_page_source))
                            # old_page_source = driver.page_source
                            # print('сейчас страница изменится')
                            # надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[22]/td/table/tbody/tr/td[{}]/a'.format(итератор_страниц_в_должнике))).click()
                            # print('Изменилась? Ждем')
                            # wait_for_page_source_to_change(old_page_source)
                            def wait_for_page_source_to_change(driver, old_page_source, timeout=10):
                                WebDriverWait(driver, timeout).until(
                                    lambda d: d.find_element(By.TAG_NAME, "html").get_attribute(
                                        "innerHTML") != old_page_source
                                )

                            old_page_source = driver.page_source
                            print('сейчас страница изменится')

                            reliable_element_search = надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[22]/td/table/tbody/tr/td[{}]/a'.format(итератор_страниц_в_должнике))).click()
                            wait_for_page_source_to_change(driver, old_page_source)
                            итератор_записей_в_должнике = 2
                            ожидание(driver)
                            элемент = надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике)))
                            xpath_template = ('/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике))
                            ожидание(driver)
                            итератор_страниц_в_должнике += 1
                            счетчик_пройденных_элементов += 1
                            ожидание(driver)
                         else:
                             итератор_для_проваливания_в_клиентов += 1
                             driver.switch_to.window(main_window)
                             driver.back()
                             ожидание(driver)
                             ожидание(driver)
                             break

                    else :
                        ожидание(driver)
                        full_xpath = xpath_template.format(итератор_записей_в_должнике)
                        wait.until(EC.presence_of_element_located((By.XPATH, full_xpath)))
                        wait.until(EC.visibility_of_element_located((By.XPATH, full_xpath)))
                        wait.until(EC.presence_of_element_located((By.XPATH, full_xpath)))
                        wait.until(EC.visibility_of_element_located((By.XPATH, full_xpath)))
                        # print('/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[1]'.format(итератор_записей_в_должнике))
                        print('сработал')
                        элемент.click()
                        ожидание(driver)
                        now_window = driver.window_handles
                        driver.switch_to.window(now_window[-1])
                        ожидание(driver)
                        урл_страницы_карточки_торгов = driver.page_source
                        ссылка = driver.current_url
                        soup = BeautifulSoup(урл_страницы_карточки_торгов, "html.parser")
                        текст_карточки = soup.get_text()
                        # Удаляем HTML-элементы
                        текст_карточки = re.sub('<[^<]+?>', '', текст_карточки)

                        # Удаляем последовательности пробелов, табуляций и дополнительные переносы строк
                        текст_карточки = re.sub('[\s\t\xa0]+', ' ', текст_карточки).strip()
                        # Извлечение значения "Вид торгов"
                        start = текст_карточки.find("Вид торгов") + len("Вид торгов")
                        end = текст_карточки.find("Дата и время начала подачи заявок", start)
                        открытые_ли_торги = текст_карточки[start:end].strip()
                        if len(открытые_ли_торги) > 40:
                            start = текст_карточки.find("Вид торгов") + len("Вид торгов")
                            end = текст_карточки.find("Требования к участникам", start)
                            открытые_ли_торги = текст_карточки[start:end].strip()

                        # Извлечение значения "Дата и время начала подачи заявок"
                        start = текст_карточки.find("Дата и время начала подачи заявок") + len(
                            "Дата и время начала подачи заявок")
                        end = текст_карточки.find("Дата и время окончания подачи заявок", start)
                        дата_начала_подачи = текст_карточки[start:end].strip()

                        # Извлечение значения "Дата и время окончания подачи заявок"
                        start = текст_карточки.find("Дата и время окончания подачи заявок") + len(
                            "Дата и время окончания подачи заявок")
                        end = текст_карточки.find("Правила подачи заявок", start)
                        дата_окончания_подачи = текст_карточки[start:end].strip()
                        if len(дата_окончания_подачи) > 100:
                            дата_окончания_подачи = ''

                        start = текст_карточки.find("Дата и время торгов") + len(
                            "Дата и время торгов")
                        end = текст_карточки.find("Форма подачи предложения о цене", start)
                        дата_торгов = текст_карточки[start:end].strip()
                        if len(дата_окончания_подачи) > 50:
                            дата_торгов = ''

                        # извлечение описания
                        старт = текст_карточки.find(
                            "Номер лотаОписаниеНачальная цена, рубШагЗадатокКлассификация имущества")
                        конец = текст_карточки.find("Дополнительная информация:", старт)
                        описание = текст_карточки[старт:конец].strip()
                        if len(описание) < 10:
                            старт = текст_карточки.find(
                                "Номер лотаОписаниеНачальная цена, рубШагЗадатокИнформация о снижении ценыКлассификация имущества")
                            конец = текст_карточки.find("Дополнительная информация:", старт)
                            описание = текст_карточки[старт:конец].strip()
                            if len(описание) < 10:
                                старт = текст_карточки.find("Номер лота1")
                                конец = текст_карточки.find("Дополнительная информация:", старт)
                                описание = текст_карточки[старт:конец].strip()
                        список_ключ_значений_торгов.append(({'номер_торгов': номер_торгов,
                                                             'дата_размещения_в_ефрсб': дата_размещения_в_ефрсб,
                                                             'ссылка_на_клиента': ссылка_на_клиента,
                                                             'описание': описание,
                                                             'ссылка': ссылка,
                                                             'дата_начала_подачи': дата_начала_подачи,
                                                             'дата_окончания_подачи': дата_окончания_подачи,
                                                             'открытые_ли_торги': открытые_ли_торги,
                                                             'регион': регион, 'дата_торгов': дата_торгов,
                                                             'ссылка_на_клиента': ссылка_на_клиента,
                                                             'дата_размещения_в_ефрсб': дата_размещения_в_ефрсб,
                                                             'номер_торгов': номер_торгов, }))
                        driver.switch_to.window(current_window)
                        ожидание(driver)
                        xpath_template = ('/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[2]/td[2]/a')
                        старая_дата = driver.find_element(By.XPATH, '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[1]'.format(итератор_записей_в_должнике))
                        старая_дата = старая_дата.text
                        старая_дата = datetime.strptime(старая_дата, "%d.%m.%Y %H:%M:%S")
                        итератор_записей_в_должнике += 1
                        счетчик_пройденных_элементов += 1
                        элемент = надежный_поиск_элемента(driver, (By.XPATH,'/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/div[2]/div[1]/div/div/table/tbody/tr[{}]/td[2]/a'.format(итератор_записей_в_должнике)))
                        ожидание(driver)
                    # except WebDriverException as e:
                    #     print('PPP')
                    #     итератор_страниц_в_должнике = 6
                    #     итератор_для_проваливания_в_клиентов += 1
                    #     driver.switch_to.window(main_window)
                    #     ожидание()
            итератор_для_проваливания_в_клиентов += 1
            driver.switch_to.window(main_window)
            driver.back()
            ожидание(driver)
    return список_ключ_значений_торгов

def перебор_страниц(i = 0, переменная_для_перебора_цифр_страниц_с_1_по_11 = 2, переменная_для_перебора_цифр_страниц_с_11_по_50 = 3):
    while i <= 1:   #49
        if i <= 9:
            заход_в_карточку()
            string = '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[22]/td/table/tbody/tr/td[{}]/a'.format(
                переменная_для_перебора_цифр_страниц_с_1_по_11)
            driver.find_element('xpath', string).click()
            ожидание(driver)
            переменная_для_перебора_цифр_страниц_с_1_по_11 += 1
            i += 1
            time.sleep(5)

        elif i > 9:
            if переменная_для_перебора_цифр_страниц_с_11_по_50 <= 12:
                заход_в_карточку()
                string = '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[22]/td/table/tbody/tr/td[{}]/a'.format(
                    переменная_для_перебора_цифр_страниц_с_11_по_50)
                driver.find_element('xpath', string).click()
                ожидание(driver)
                переменная_для_перебора_цифр_страниц_с_11_по_50 += 1
                i += 1
                time.sleep(5)
                if i == 49:
                    ожидание(driver)
                    заход_в_карточку()
                    i += 1
            elif i > 12:
                переменная_для_перебора_цифр_страниц_с_11_по_50 = 3

    return список_ключ_значений_торгов


def актуализация_бд():
    перебор_страниц()
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()

    # Создание таблицы, если она не существует
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS торги (
            дата_размещения_в_ефрсб TEXT,
            описание TEXT,
            ссылка PRIMARY KEY,
            регион TEXT,
            ссылка_на_клиента TEXT,
            открытые_ли_торги TEXT,
            номер_торгов TEXT,
            дата_начала_подачи TEXT,
            дата_окончания_подачи TEXT,
            дата_торгов TEXT
        )
    ''')

    for item in список_ключ_значений_торгов:
        ссылка = item.get('ссылка')

        # Проверка, существует ли элемент в базе данных
        cursor.execute('SELECT * FROM торги WHERE ссылка = ?', (ссылка,))
        existing_item = cursor.fetchone()

        if existing_item:
            print(f"Элемент {ссылка} уже существует в базе данных.")
        else:
            описание = item.get('описание')
            if описание:
                # Добавление элемента в базу данных
                cursor.execute('''
                    INSERT INTO торги (
                        дата_размещения_в_ефрсб,
                        описание,
                        ссылка,
                        регион,
                        ссылка_на_клиента,
                        открытые_ли_торги,
                        номер_торгов,
                        дата_начала_подачи,
                        дата_окончания_подачи,
                        дата_торгов
                    )
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    item.get('дата_размещения_в_ефрсб'),
                    item.get('описание'),
                    item.get('ссылка'),
                    item.get('регион'),
                    item.get('ссылка_на_клиента'),
                    item.get('открытые_ли_торги'),
                    item.get('номер_торгов'),
                    item.get('дата_начала_подачи'),
                    item.get('дата_окончания_подачи'),
                    item.get('дата_торгов')
                ))

                print(f"Элемент {ссылка} добавлен в базу данных.")
            else:
                print(f"Элемент {ссылка} не добавлен в базу данных из-за отсутствия описания.")

    # Сохранение изменений и закрытие соединения с базой данных
    conn.commit()
    conn.close()


def поиск_по_бд(search_word):
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()

    # Выполняем запрос для поиска вхождений
    query = "SELECT * FROM торги WHERE описание LIKE '%' || ? || '%'"
    cursor.execute(query, (search_word,))

    # Получаем результаты запроса
    results = cursor.fetchall()
    df = pd.DataFrame(results, columns=[desc[0] for desc in cursor.description])
    current_date = datetime.datetime.now().strftime("%d.%m.%y.%H.%M.%S")
    # Сохраняем DataFrame в файл Excel
    excel_file = f'output{current_date}.xlsx'
    df.to_excel(excel_file, index=False)
    print("Excel-таблица сохранена в файл:", excel_file)

    # Выводим результаты
    # for row in results:
    #     print(row)

    conn.close()
    print('Поиск завершен. Результаты загружены в output.xlsx')
    time.sleep(5)


def поиск_по_маске_в_бд(search_word):
        conn = sqlite3.connect('mydatabase.db')  # Подключение к базе данных
        cursor = conn.cursor()

        # Выполняем SQL-запрос для поиска текста в поле "описание"
        cursor.execute("SELECT * FROM торги WHERE описание LIKE ?", ('%{}%'.format(search_word),))

        results = cursor.fetchall()  # Получаем все результаты

        df = pd.DataFrame(results, columns=[desc[0] for desc in cursor.description])
        current_date = datetime.datetime.now().strftime("%d.%m.%y.%H.%M.%S")
        # Сохраняем DataFrame в файл Excel
        excel_file = f'output{current_date}.xlsx'
        df.to_excel(excel_file, index=False)
        print("Excel-таблица сохранена в файл:", excel_file)

        # Выводим результаты
        # for row in results:
        #     print(row)

        conn.close()
        print('Поиск завершен. Результаты загружены в output.xlsx')
        time.sleep(5)




def дубликаты():
    conn = sqlite3.connect('mydatabase.db')  # Подключение к базе данных
    cursor = conn.cursor()

    cursor.execute("SELECT ссылка, COUNT(ссылка) FROM торги GROUP BY ссылка HAVING COUNT(ссылка) > 1")
    duplicates = cursor.fetchall()

    if len(duplicates) == 0:
        print("Нет совпадающих ссылок в базе данных.")
    else:
        print("Совпадающие ссылки:")

        for duplicate in duplicates:
            link = duplicate[0]
            print(link)

    conn.close()


def очистка_бд():
    # Подключение к базе данных
    conn = sqlite3.connect('mydatabase.db')
    cursor = conn.cursor()
    # Получение количества записей в таблице
    cursor.execute('''SELECT COUNT(*) FROM торги''')
    count = cursor.fetchone()[0]

    # Удаление старых значений, если количество записей превышает 100000
    if count >= 120000:
        delete_count = count - 120000
        cursor.execute(
            f'''DELETE FROM торги WHERE id IN (SELECT id FROM торги ORDER BY id ASC LIMIT {delete_count})''')
        conn.commit()
        print(f'{delete_count} старых записей удалены')
    else:
        print('пока не набралось больше 120 000')

    # Закрытие соединения с базой данных
    conn.close()


def вызов_поиска():
    search_word = ввод_поиска.get()
    поиск_по_бд(search_word)

def вызов_поиска_по_маске():
    search_word = ввод_поиска_по_маске.get()
    поиск_по_маске_в_бд(search_word)


def hello():
    print('Hello')

# Создание окна
окно = tk.Tk()

# Создание кнопок
кнопка_актуализации = tk.Button(окно, text="Актуализация", command=актуализация_бд)
кнопка_очистки = tk.Button(окно, text="Очистка", command=очистка_бд)
кнопка_поиска = tk.Button(окно, text="Поиск", command=вызов_поиска)
кнопка_поиска_по_маске = tk.Button(окно, text="Поиск по маске", command=вызов_поиска_по_маске)
кнопка_дубликаты = tk.Button(окно, text="Поиск дублирующихся ссылок на торги", command=дубликаты)


# Создание поля для ввода текста
ввод_поиска = tk.Entry(окно)
ввод_поиска_по_маске = tk.Entry(окно)

# Размещение кнопок и полей в окне
кнопка_актуализации.pack()
кнопка_очистки.pack()
ввод_поиска.pack()
кнопка_поиска.pack()
ввод_поиска_по_маске.pack()
кнопка_поиска_по_маске.pack()
кнопка_дубликаты.pack()

# Запуск главного цикла окна
окно.mainloop()


# def получение_списка_с_парами_ключ_значение_по_странице( итератор_для_функции_получения_записей_с_торгов = 2):
#     while итератор_для_функции_получения_записей_с_торгов <= 21:
#         wait = WebDriverWait(driver, 10)
#         wait.until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
#         номер_торгов = driver.find_element('xpath', '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[{}]/td[1]'.format(итератор_для_функции_получения_записей_с_торгов)).text
#         дата_размещения_в_ефрсб = driver.find_element('xpath', '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[{}]/td[3]'.format(итератор_для_функции_получения_записей_с_торгов)).text
#         # Дата_размещения_заявки_в_ЕФРСБ = driver.find_element('xpath', '/html/body/form/table/tbody/tr[2]/td/div/table[2]/tbody/tr[2]/td/table/tbody/tr/td[2]/div/div/table/tbody/tr[{}]/td[3]'.format(итератор_для_функции_получения_записей_с_торгов)).get_attribute('innerHTML')
#         # Дата_размещения_заявки_в_ЕФРСБ = Дата_размещения_заявки_в_ЕФРСБ.strip(">\n\t")
#         if итератор_для_функции_получения_записей_с_торгов < 10:
#             ссылка_на_клиента = driver.find_element('xpath','//*[@id="ctl00_cphBody_gvTradeList_ctl0{}_HyperLink1"]'.format(итератор_для_функции_получения_записей_с_торгов)).get_attribute('href')
#         elif итератор_для_функции_получения_записей_с_торгов >= 10:
#             ссылка_на_клиента = driver.find_element('xpath','//*[@id="ctl00_cphBody_gvTradeList_ctl{}_HyperLink1"]'.format(итератор_для_функции_получения_записей_с_торгов)).get_attribute('href')
#         список_ключ_значений_торгов.append(({'номер_торгов': номер_торгов,  'дата_размещения_в_ефрсб': дата_размещения_в_ефрсб, 'ссылка_на_клиента' : ссылка_на_клиента}))
#         итератор_для_функции_получения_записей_с_торгов += 1
#         # 'Дата_размещения_заявки_в_ЕФРСБ': Дата_размещения_заявки_в_ЕФРСБ,
#     return список_ключ_значений_торгов


